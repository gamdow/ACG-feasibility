//
// auto-generated by ops.py
//
#define OPS_ACC0(x) (n_x*1+x)
#define OPS_ACC1(x) (n_x*1+x)


//user function

// host stub function
void ops_par_loop_wave_block0_3_kernel_execute(ops_kernel_descriptor *desc) {
  ops_block block = desc->block;
  int dim = desc->dim;
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];

  //Timing
  double t1,t2,c1,c2;

  ops_arg args[3] = { arg0, arg1, arg2};



  #ifdef CHECKPOINTING
  if (!ops_checkpointing_before(args,3,range,5)) return;
  #endif

  if (OPS_diags > 1) {
    OPS_kernels[5].count++;
    ops_timers_core(&c2,&t2);
  }

  //compute locally allocated range for the sub-block
  int start[1];
  int end[1];

  for ( int n=0; n<1; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }

  #ifdef OPS_DEBUG
  ops_register_args(args, "wave_block0_3_kernel");
  #endif



  //set up initial pointers and exchange halos if necessary
  int base0 = args[0].dat->base_offset;
  const double * __restrict__ wk1 = (double *)(args[0].data + base0);

  int base1 = args[1].dat->base_offset;
  double * __restrict__ phi_old = (double *)(args[1].data + base1);

  const double * __restrict__ rkold = (double *)args[2].data;



  //initialize global variable with the dimension of dats

  if (OPS_diags > 1) {
    ops_timers_core(&c1,&t1);
    OPS_kernels[5].mpi_time += t1-t2;
  }

  #pragma omp parallel for
  #ifdef intel
  #pragma loop_count(10000)
  #pragma omp simd aligned(wk1,phi_old)
  #else
  #pragma simd
  #endif
  for ( int n_x=start[0]; n_x<end[0]; n_x++ ){
    
phi_old[OPS_ACC1(0)] = deltat*rkold[0]*wk1[OPS_ACC0(0)] + phi_old[OPS_ACC1(0)];

  }
  if (OPS_diags > 1) {
    ops_timers_core(&c2,&t2);
    OPS_kernels[5].time += t2-t1;
  }

  if (OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&c1,&t1);
    OPS_kernels[5].mpi_time += t1-t2;
    OPS_kernels[5].transfer += ops_compute_transfer(dim, start, end, &arg0);
    OPS_kernels[5].transfer += ops_compute_transfer(dim, start, end, &arg1);
  }
}
#undef OPS_ACC0
#undef OPS_ACC1


void ops_par_loop_wave_block0_3_kernel(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2) {
  ops_kernel_descriptor *desc = (ops_kernel_descriptor *)malloc(sizeof(ops_kernel_descriptor));
  desc->name = name;
  desc->block = block;
  desc->dim = dim;
  desc->index = 5;
  desc->hash = 5381;
  desc->hash = ((desc->hash << 5) + desc->hash) + 5;
  for ( int i=0; i<2; i++ ){
    desc->range[i] = range[i];
    desc->orig_range[i] = range[i];
    desc->hash = ((desc->hash << 5) + desc->hash) + range[i];
  }
  desc->nargs = 3;
  desc->args = (ops_arg*)malloc(3*sizeof(ops_arg));
  desc->args[0] = arg0;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg0.dat->index;
  desc->args[1] = arg1;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg1.dat->index;
  desc->args[2] = arg2;
  char *tmp = (char*)malloc(1*sizeof(double));
  memcpy(tmp, arg2.data,1*sizeof(double));
  desc->args[2].data = tmp;
  desc->function = ops_par_loop_wave_block0_3_kernel_execute;
  if (OPS_diags > 1) {
    ops_timing_realloc(5,"wave_block0_3_kernel");
  }
  ops_enqueue_kernel(desc);
  }
