//
// auto-generated by ops.py
//
#include "./MPI_inline/wave_common.h"

extern int xdim0_wave_block0_0_kernel;
int xdim0_wave_block0_0_kernel_h = -1;
extern int xdim1_wave_block0_0_kernel;
int xdim1_wave_block0_0_kernel_h = -1;

#ifdef __cplusplus
extern "C" {
#endif
void wave_block0_0_kernel_c_wrapper(
  double *p_a0,
  double *p_a1,
  int x_size);

#ifdef __cplusplus
}
#endif

// host stub function
void ops_par_loop_wave_block0_0_kernel(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1) {

  ops_arg args[2] = { arg0, arg1};


  #ifdef CHECKPOINTING
  if (!ops_checkpointing_before(args,2,range,2)) return;
  #endif

  ops_timing_realloc(2,"wave_block0_0_kernel");
  OPS_kernels[2].count++;

  //compute localy allocated range for the sub-block
  int start[1];
  int end[1];
  #ifdef OPS_MPI
  sub_block_list sb = OPS_sub_block_list[block->index];
  if (!sb->owned) return;
  for ( int n=0; n<1; n++ ){
    start[n] = sb->decomp_disp[n];end[n] = sb->decomp_disp[n]+sb->decomp_size[n];
    if (start[n] >= range[2*n]) {
      start[n] = 0;
    }
    else {
      start[n] = range[2*n] - start[n];
    }
    if (sb->id_m[n]==MPI_PROC_NULL && range[2*n] < 0) start[n] = range[2*n];
    if (end[n] >= range[2*n+1]) {
      end[n] = range[2*n+1] - sb->decomp_disp[n];
    }
    else {
      end[n] = sb->decomp_size[n];
    }
    if (sb->id_p[n]==MPI_PROC_NULL && (range[2*n+1] > sb->decomp_disp[n]+sb->decomp_size[n]))
      end[n] += (range[2*n+1]-sb->decomp_disp[n]-sb->decomp_size[n]);
  }
  #else
  for ( int n=0; n<1; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #endif

  int x_size = MAX(0,end[0]-start[0]);


  xdim0 = args[0].dat->size[0];
  xdim1 = args[1].dat->size[0];

  //Timing
  double t1,t2,c1,c2;
  ops_timers_core(&c2,&t2);

  if (xdim0 != xdim0_wave_block0_0_kernel_h || xdim1 != xdim1_wave_block0_0_kernel_h) {
    xdim0_wave_block0_0_kernel = xdim0;
    xdim0_wave_block0_0_kernel_h = xdim0;
    xdim1_wave_block0_0_kernel = xdim1;
    xdim1_wave_block0_0_kernel_h = xdim1;
  }

  int dat0 = args[0].dat->elem_size;
  int dat1 = args[1].dat->elem_size;


  //set up initial pointers
  int d_m[OPS_MAX_DIM];
  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[0].dat->d_m[d] + OPS_sub_dat_list[args[0].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[0].dat->d_m[d];
  #endif
  int base0 = dat0 * 1 * 
    (start[0] * args[0].stencil->stride[0] - args[0].dat->base[0] - d_m[0]);
  double *p_a0 = (double *)((char *)args[0].data + base0);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[1].dat->d_m[d] + OPS_sub_dat_list[args[1].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[1].dat->d_m[d];
  #endif
  int base1 = dat1 * 1 * 
    (start[0] * args[1].stencil->stride[0] - args[1].dat->base[0] - d_m[0]);
  double *p_a1 = (double *)((char *)args[1].data + base1);


  ops_H_D_exchanges_host(args, 2);
  ops_halo_exchanges(args,2,range);

  ops_timers_core(&c1,&t1);
  OPS_kernels[2].mpi_time += t1-t2;

  wave_block0_0_kernel_c_wrapper(
    p_a0,
    p_a1,
    x_size);

  ops_timers_core(&c2,&t2);
  OPS_kernels[2].time += t2-t1;
  ops_set_dirtybit_host(args, 2);
  ops_set_halo_dirtybit3(&args[1],range);

  //Update kernel record
  OPS_kernels[2].transfer += ops_compute_transfer(dim, start, end, &arg0);
  OPS_kernels[2].transfer += ops_compute_transfer(dim, start, end, &arg1);
}
