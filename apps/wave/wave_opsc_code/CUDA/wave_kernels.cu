//
// auto-generated by ops.py//

//header
#define OPS_ACC_MD_MACROS
#include "ops_lib_cpp.h"

#include "ops_cuda_rt_support.h"
#include "ops_cuda_reduction.h"

#include <cuComplex.h>

#ifdef OPS_MPI
#include "ops_mpi_core.h"
#endif
// global constants
__constant__ double rc1;
__constant__ double rc2;
__constant__ double rc0;
__constant__ double deltat;
__constant__ double c0;
__constant__ double deltai0;
__constant__ double rc3;
__constant__ int nx0;

void ops_decl_const_char(int dim, char const *type,
int size, char *dat, char const *name){
  if (!strcmp(name,"rc1")) {
    cutilSafeCall(cudaMemcpyToSymbol(rc1, dat, dim*size));
  }
  else
  if (!strcmp(name,"rc2")) {
    cutilSafeCall(cudaMemcpyToSymbol(rc2, dat, dim*size));
  }
  else
  if (!strcmp(name,"rc0")) {
    cutilSafeCall(cudaMemcpyToSymbol(rc0, dat, dim*size));
  }
  else
  if (!strcmp(name,"deltat")) {
    cutilSafeCall(cudaMemcpyToSymbol(deltat, dat, dim*size));
  }
  else
  if (!strcmp(name,"c0")) {
    cutilSafeCall(cudaMemcpyToSymbol(c0, dat, dim*size));
  }
  else
  if (!strcmp(name,"deltai0")) {
    cutilSafeCall(cudaMemcpyToSymbol(deltai0, dat, dim*size));
  }
  else
  if (!strcmp(name,"rc3")) {
    cutilSafeCall(cudaMemcpyToSymbol(rc3, dat, dim*size));
  }
  else
  if (!strcmp(name,"nx0")) {
    cutilSafeCall(cudaMemcpyToSymbol(nx0, dat, dim*size));
  }
  else
  {
    printf("error: unknown const name\n"); exit(1);
  }
}


//user kernel files
#include "wave_block0_5_kernel_cuda_kernel.cu"
#include "wave_block0_4_kernel_cuda_kernel.cu"
#include "wave_block0_0_kernel_cuda_kernel.cu"
#include "wave_block0_1_kernel_cuda_kernel.cu"
#include "wave_block0_2_kernel_cuda_kernel.cu"
#include "wave_block0_3_kernel_cuda_kernel.cu"
